#!/usr/bin/env python
# coding: utf-8

"""
Test script for the updated twisstntern pipeline that handles both tree files and CSV files.
"""

import sys
import os
from pathlib import Path

# Add the package to path
sys.path.append('.')

from twisstntern import run_analysis, detect_file_type

def test_file_type_detection():
    """Test the file type detection function"""
    print("="*60)
    print("TESTING FILE TYPE DETECTION")
    print("="*60)
    
    test_cases = [
        ("data.csv", "csv"),
        ("trees.trees", "tree"), 
        ("sequences.ts", "tree"),
        ("phylo.newick", "tree"),
        ("phylo.nwk", "tree"),
        ("trees.nexus", "tree"),
    ]
    
    for filename, expected in test_cases:
        try:
            result = detect_file_type(filename)
            status = "✓" if result == expected else "✗"
            print(f"{status} {filename} -> {result} (expected: {expected})")
        except Exception as e:
            print(f"✗ {filename} -> Error: {e}")
    
    # Test unsupported format
    try:
        detect_file_type("data.txt")
        print("✗ Should have failed for .txt file")
    except ValueError as e:
        print(f"✓ Correctly rejected .txt file: {e}")

def test_tree_file_pipeline():
    """Test the pipeline with a tree file"""
    print("\n" + "="*60)
    print("TESTING TREE FILE PIPELINE")
    print("="*60)
    
    # Use the Newick file we generated earlier
    tree_file = "tree files/ts_pop_plain.newick"
    
    if not Path(tree_file).exists():
        print(f"✗ Tree file not found: {tree_file}")
        print("  Please run generate_trees.py first to create test tree files")
        return False
    
    try:
        print(f"Testing with tree file: {tree_file}")
        
        # Test the pipeline with tree file
        results, fundamental_results, csv_used = run_analysis(
            file=tree_file,
            granularity="coarse",
            taxon_names=['O', 'P1', 'P2', 'P3'],  # Population names from our generated trees
            outgroup='O'
        )
        
        print(f"✓ Tree file pipeline completed successfully!")
        print(f"  - Results shape: {results.shape}")
        print(f"  - CSV file used: {csv_used}")
        print(f"  - Fundamental asymmetry: {fundamental_results}")
        
        # Check if the generated CSV exists
        if Path(csv_used).exists():
            print(f"✓ Generated CSV file exists: {csv_used}")
        else:
            print(f"✗ Generated CSV file missing: {csv_used}")
            
        return True
        
    except Exception as e:
        print(f"✗ Tree file pipeline failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_csv_file_pipeline():
    """Test the pipeline with a CSV file (if available)"""
    print("\n" + "="*60)
    print("TESTING CSV FILE PIPELINE")
    print("="*60)
    
    # Look for any existing CSV file or use the one generated by tree processing
    csv_files = list(Path("Results").glob("*_topology_weights.csv")) if Path("Results").exists() else []
    
    if not csv_files:
        print("No CSV files found for testing. Skipping CSV pipeline test.")
        return True
    
    csv_file = str(csv_files[0])
    
    try:
        print(f"Testing with CSV file: {csv_file}")
        
        # Test the pipeline with CSV file (no tree processing parameters needed)
        results, fundamental_results, csv_used = run_analysis(
            file=csv_file,
            granularity="coarse"
        )
        
        print(f"✓ CSV file pipeline completed successfully!")
        print(f"  - Results shape: {results.shape}")
        print(f"  - CSV file used: {csv_used}")
        print(f"  - Same as input: {csv_used == csv_file}")
        print(f"  - Fundamental asymmetry: {fundamental_results}")
        
        return True
        
    except Exception as e:
        print(f"✗ CSV file pipeline failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Run all tests"""
    print("TWISSTNTERN PIPELINE TESTING")
    print("="*60)
    
    # Test 1: File type detection
    test_file_type_detection()
    
    # Test 2: Tree file pipeline
    tree_success = test_tree_file_pipeline()
    
    # Test 3: CSV file pipeline 
    csv_success = test_csv_file_pipeline()
    
    # Summary
    print("\n" + "="*60)
    print("TEST SUMMARY")
    print("="*60)
    print(f"Tree file pipeline: {'✓ PASS' if tree_success else '✗ FAIL'}")
    print(f"CSV file pipeline: {'✓ PASS' if csv_success else '✗ FAIL'}")
    
    if tree_success and csv_success:
        print("\n🎉 All tests passed! The updated pipeline is working correctly.")
    else:
        print("\n❌ Some tests failed. Please check the errors above.")
    
    return tree_success and csv_success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 




















    # taking in a ts object- not in generator or Newick format- and returning the populations with samples
def debug_ts_populations(ts):
    """
    Debug function to inspect TreeSequence population structure.
    Useful for understanding what populations are available.
    """
    print("=== TreeSequence Population Debug ===")
    print(f"Total populations: {ts.num_populations}")
    print(f"Total samples: {ts.num_samples}")
    print(f"Total trees: {ts.num_trees}")
    print()

    # Show population details
    print("Population details:")
    for i in range(ts.num_populations):
        pop = ts.population(i)
        metadata = pop.metadata if pop.metadata else {}
        name = metadata.get("name", f"Pop{i}") if metadata else f"Pop{i}"

        # Count samples in this population
        samples = [int(s) for s in ts.samples() if ts.node(s).population == i]

        print(f"  Population {i}: name='{name}', {len(samples)} samples")
        if len(samples) > 0:
            print(f"    Sample IDs: {samples[:5]}{'...' if len(samples) > 5 else ''}")

    print()

    # Show what twisst would extract
    populations_with_samples = []
    for pop_id in range(ts.num_populations):
        samples = [s for s in ts.samples() if ts.node(s).population == pop_id]
        if len(samples) > 0:
            populations_with_samples.append(str(pop_id))

    print(f"Populations with samples (for twisst): {populations_with_samples}")

    if len(populations_with_samples) >= 3:
        print(
            f"✓ Ready for topology analysis ({len(populations_with_samples)} populations)"
        )
    else:
        print(
            f"✗ Need at least 3 populations with samples (found {len(populations_with_samples)})"
        )

    return populations_with_samples
